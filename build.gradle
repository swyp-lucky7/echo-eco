plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.1'
	id 'io.spring.dependency-management' version '1.1.5'
	id 'jacoco'
}

group = 'teamseven'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

configurations.configureEach {
	exclude group: 'commons-logging', module: 'commons-logging'
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-mail'
	implementation 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect'
	implementation 'org.slf4j:slf4j-api:2.0.13'
	implementation 'ch.qos.logback:logback-classic:1.5.6'
	implementation 'ch.qos.logback:logback-core:1.5.6'

	//query dsl
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

	implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'
	implementation 'org.testcontainers:localstack'
	implementation 'com.amazonaws:aws-java-sdk-s3:1.12.749'
	// aws-java-sdk-s3 의존해서 설치 :: 설치 안할시 워닝 뜸
	implementation 'jakarta.xml.bind:jakarta.xml.bind-api:4.0.2'

	//JWT
	implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
	implementation 'io.jsonwebtoken:jjwt-impl:0.12.3'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.12.3'

	compileOnly 'org.projectlombok:lombok'
	implementation 'mysql:mysql-connector-java:8.0.32'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'com.h2database:h2'
	testImplementation 'cloud.localstack:localstack-utils:0.2.20'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
	useJUnitPlatform()
}

sourceSets {
	main {
		java {
			srcDirs = ['src/main/java']
		}
		resources {
			srcDirs = ['src/main/resources']
		}
	}
	generated {
		java {
			srcDirs = ['build/generated']
		}
	}
}

tasks.register('generateQueryDSL', JavaCompile) {
	source = sourceSets.main.java.srcDirs
	classpath = configurations.compileClasspath
	options.annotationProcessorPath = configurations.annotationProcessor
	destinationDirectory.set(file("build/generated"))
	options.compilerArgs = [
			"-proc:only",
			"-processor", "com.querydsl.apt.jpa.JPAAnnotationProcessor"
	]
}

clean {
	delete fileTree("build/generated")
}

jacoco {
	toolVersion = "0.8.8"
}

def jacocoIncludePatterns = [
		"**/service/**"
]

test {
	finalizedBy jacocoTestReport // 테스트가 끝난 후 jacocoTestReport를 실행합니다.
}


jacocoTestReport {
	dependsOn test // jacocoTestReport는 테스트 이후에 실행됩니다.
	reports {
		xml.required = false
		csv.required = false
		html.required = true

		html.destination file(layout.buildDirectory.dir("jacocoHtml"))
	}

	afterEvaluate {
		classDirectories.setFrom(
			files(classDirectories.files.collect {
				fileTree(dir: it, includes: [
						"**/service/**"
				])
			})
		)
	}

}